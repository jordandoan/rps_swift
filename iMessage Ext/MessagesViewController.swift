//
//  MessagesViewController.swift
//  iMessage Ext
//
//  Created by Sara Ryane on 3/29/20.
//  Copyright Â© 2020 Jordan Doan. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, StartGameViewControllerDelegate, GameViewControllerDelegate {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    private func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        var controller: UIViewController!
        if presentationStyle == .compact {
            controller = instantiateStartGameViewController()
        } else {
            if let session = conversation.selectedMessage?.session {
                controller = instatiateGameViewController()
            } else {
                controller = instantiateStartGameViewController()
            }
//            controller = instatiateGameViewController()
        }
        addChild(controller)
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        controller.didMove(toParent: self)		
    }
    
    func startGameViewControllerDidSubmit() {
        let layout = MSMessageTemplateLayout()
        layout.caption = "Rock, Paper, Scissors!"
        
        let session = activeConversation?.selectedMessage?.session
        let message = MSMessage(session: session ?? MSSession())
        message.layout = layout
        self.activeConversation?.insert(message, completionHandler: nil)
    }
    
    func gameViewControllerDidSubmit(caption: String) {
        let layout = MSMessageTemplateLayout()
        layout.caption = caption
        
        let session = activeConversation?.selectedMessage?.session
        let message = MSMessage(session: session ?? MSSession())
        message.layout = layout
        self.activeConversation?.send(message, completionHandler: nil)
        dismiss()
    }
    
    private func instatiateGameViewController() -> UIViewController {
        guard let controller = self.storyboard?.instantiateViewController(withIdentifier: "Game") as? Game else {
        fatalError("Game not found")
        }
        controller.delegate = self
        return controller
    }
    
    private func instantiateStartGameViewController() -> UIViewController {
        guard let controller = self.storyboard?.instantiateViewController(withIdentifier: "StartGame") as? StartGame else {
            fatalError("StartGame not found")
        }
        controller.delegate = self
        return controller
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        guard let conversation = activeConversation else {
            fatalError("Expected an active conversation")
        }
        
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
